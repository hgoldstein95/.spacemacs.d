#+TITLE: Spacemacs Configuration
#+AUTHOR: Harrison Goldstein

* Global Tweaks

  I prefer not to jump completely out of the editor when I use =:q=, so now it
  just kills the current window.

  #+BEGIN_SRC emacs-lisp
  (evil-ex-define-cmd "q[uit]" 'evil-window-delete)
  #+END_SRC

  I also prefer to see a fill-column when I am editing, so I turn it on for all
  programming and text modes.

  #+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'spacemacs/toggle-fill-column-indicator-on)
  (add-hook 'text-mode-hook 'spacemacs/toggle-fill-column-indicator-on)
  #+END_SRC

  When splitting to the right, I rarely want to visit the same file in both
  buffers. I define the interactive function below to split right, focus the
  right window, and then run =helm-mini=.

  #+BEGIN_SRC emacs-lisp
  (defun hjg/split-window-right-and-helm ()
    (interactive)
    (split-window-right-and-focus)
    (helm-mini))
  #+END_SRC

  I bind it to =SPC w V= because that is the usual binding for
  =split-window-right-and-focus=.

  #+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys "wV" 'hjg/split-window-right-and-helm)
  #+END_SRC

  I also want to be able to kill a buffer and a window simultaneously.

  #+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys "dd" 'kill-buffer-and-window)
  #+END_SRC

* Spacemacs Configuration

  The following function allows me to open this configuration file from
  anywhere.

  #+BEGIN_SRC emacs-lisp
  (defun hjg/edit-config-file ()
    (interactive)
    (find-file (concat dotspacemacs-directory "config.org")))
  #+END_SRC

  Then, I bind it to =SPC f e c=.

  #+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys "fec" 'hjg/edit-config-file)
  #+END_SRC

* Publishing

  I want to be able to use =org-publish= to publish my blog, so this
  configuration handles that. As of now, I have nothing to publish.

  #+BEGIN_SRC emacs-lisp
  (setq org-publish-project-alist '())
  #+END_SRC

* Language Specific Configuration
** Rust

   I use the =lalrpop= rust package to generate lexers and parsers, so I want to
   open those files in =rust-mode=.

   #+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.lalrpop$" . rust-mode))
   #+END_SRC

** LaTeX

   In order to get the PDF viewer to refresh automatically on build, I use this
   (magic?) hook.

   #+BEGIN_SRC emacs-lisp
   (add-hook 'doc-view-mode-hook 'auto-revert-mode)
   #+END_SRC

** Javascript

   I don't like warnings in my javascript files, because the warnings aren't
   particularly useful. (There are issues with externally defined variables
   always generating warnings.)

   #+BEGIN_SRC emacs-lisp
  (setq js2-mode-show-strict-warnings nil)
   #+END_SRC

** Org

   I want my lines to auto-wrap in =org-mode=.

   #+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'auto-fill-mode)
   #+END_SRC

   This function sets my export configuration for =org-mode=. It puts exported
   files into their own directory (which can be ignored by my VCS).

   #+BEGIN_SRC emacs-lisp
     (defun hjg/config-export ()
       (defadvice org-export-output-file-name
         (before org-add-export-dir activate)
         (when (not pub-dir)
           (setq pub-dir "export")
           (when (not (file-directory-p pub-dir))
             (make-directory pub-dir)))))
   #+END_SRC

   I have these settings inside the =with-eval-after-load= block because without
   it, spacemacs would accidentally load the wrong version of =org-mode=. Here I
   call the previously defind function and set some other variables for org.

   #+BEGIN_SRC emacs-lisp
     (defun my-org-confirm-babel-evaluate (lang body)
       (not (string= lang "dot")))
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((python . t)
        (shell . t)
        (octave . t)
        (dot . t)))
     (with-eval-after-load 'org
       (hjg/config-export)
       (setq org-directory "~/Org/")
       (setq org-default-notes-file (concat org-directory "/notes.org"))
       (setq org-export-backends '(beamer html latex md gfm))
       (setq org-ellipsis "⬎")
       (setq org-bullets-bullet-list '("▣" "►" "■" "▸" "▪"))
       (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
       (setq org-babel-python-command "python3"))
   #+END_SRC

** Coq

   Eventually I should move this into its own layer, but this is my config for
   coq and =proof-general-mode=.

   First, I load a local version of proof general from my
   =.spacemacs.d/packages= directory.

   #+BEGIN_SRC emacs-lisp
  (load (concat dotspacemacs-directory "packages/PG/generic/proof-site"))
   #+END_SRC

   Then I set some keybindings for more easily navigating the interface.

   #+BEGIN_SRC emacs-lisp
   (with-eval-after-load "proof-script"
   (define-key proof-mode-map (kbd "<M-down>")
     'proof-assert-next-command-interactive)
   (define-key proof-mode-map (kbd "<M-up>")
     'proof-undo-last-successful-command)
   (define-key proof-mode-map (kbd "M-j")
     'proof-assert-next-command-interactive)
   (define-key proof-mode-map (kbd "M-k")
     'proof-undo-last-successful-command))
   #+END_SRC

** Python
   #+BEGIN_SRC emacs-lisp
   (setq python-shell-interpreter "python3")
   #+END_SRC

** Haskell
   #+BEGIN_SRC emacs-lisp
     (add-hook
      'haskell-mode-hook
      (lambda ()
        (add-hook
         'before-save-hook
         #'(lambda () (funcall #'hindent-reformat-buffer)) nil t)))
   #+END_SRC

** Elm
   #+BEGIN_SRC emacs-lisp
     (add-hook 'elm-mode-hook
       (lambda () (add-hook 'before-save-hook #'
         (lambda () (funcall #'elm-mode-format-buffer)) nil t)))
   #+END_SRC

** Markdown
   #+BEGIN_SRC emacs-lisp
     (add-hook 'markdown-mode-hook 'auto-fill-mode)
   #+END_SRC
