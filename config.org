#+TITLE: Spacemacs Configuration

* Global Tweaks

I prefer not to jump completely out of the editor when I use =:q=, so now it
just kills the current window.

#+BEGIN_SRC emacs-lisp
  (evil-ex-define-cmd "q[uit]" 'evil-window-delete)
#+END_SRC

I also prefer to see a fill-column when I am editing, so I turn it on for all
programming and text modes.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'spacemacs/toggle-fill-column-indicator-on)
  (add-hook 'text-mode-hook 'spacemacs/toggle-fill-column-indicator-on)
#+END_SRC

When splitting to the right, I rarely want to visit the same file in both
buffers. I define the interactive function below to split right, focus the right
window, and then run =helm-mini=.

#+BEGIN_SRC emacs-lisp
  (defun hjg/split-window-right-and-helm ()
    (interactive)
    (split-window-right-and-focus)
    (helm-mini))
#+END_SRC

I bind it to =SPC w V= because that is the usual binding for
=split-window-right-and-focus=.

#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys "wV" 'hjg/split-window-right-and-helm)
#+END_SRC

* Language Specific Configuration
** Rust

I use the =lalrpop= rust package to generate lexers and parsers, so I want to
open those files in =rust-mode=.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.lalrpop$" . rust-mode))
#+END_SRC

** LaTeX

In order to get the PDF viewer to refresh automatically on build, I use this
(magic?) hook.

#+BEGIN_SRC emacs-lisp
  (add-hook 'doc-view-mode-hook 'auto-revert-mode)
#+END_SRC

** Javascript

I don't like warnings in my javascript files, because the warnings aren't
particularly useful. (There are issues with externally defined variables always
generating warnings.)

#+BEGIN_SRC emacs-lisp
  (setq js2-mode-show-strict-warnings nil)
#+END_SRC

** Org

I want my lines to auto-wrap in =org-mode=.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC

I have these settings inside the =with-eval-after-load= block because without
it, spacemacs would accidentally load the wrong version of =org-mode=.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-directory "~/Org/")
    (setq org-default-notes-file (concat org-directory "/notes.org"))
    (setq org-export-backends '(beamer html latex md gfm)))
#+END_SRC

** Coq

Eventually I should move this into its own layer, but this is my config for coq
and =proof-general-mode=.

#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.d/lisp/PG/generic/proof-site")
  (eval-after-load "proof-script"
    '(progn
       (define-key
         proof-mode-map
         (kbd "<M-down>")
         'proof-assert-next-command-interactive)
       (define-key
         proof-mode-map
         (kbd "<M-up>")
         'proof-undo-last-successful-command)))
#+END_SRC
